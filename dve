#!/bin/bash -e

set -e

# defaults for all configuration values
PROBE="ffprobe"
ENC="ffmpeg"
CRF=24
#OPTS="-map 0 -c:v libx265 -pix_fmt yuv420p10le -preset fast -x265-params crf=${CRF}:aq-mode=3 -c:a libvorbis -aq 5"
OPTS="-map 0 -c:V libx265 -pix_fmt yuv420p10le -preset fast"
# This is to split out and copy attachment streams, like subtitles
# and fonts, so they only get copied once.
DATA_OPTS="-map 0 -c:s copy -c:t copy -c:d copy -c:a copy -Vn"
DATA_OPTS="-map 0:s? -map 0:t? -map 0:d? -map 0:a?"
SERVERS="1/:"
LEN=300
CWD=$(pwd)
OUTDIR=$(mktemp -d)
FORMAT=matroska
DEFAULT_SUFFIX=_x265.mkv
NOREPLACE=0

function on_finish() {
  echo "Cleaning up temporary working files"
  cd "$CWD"
  rm -rf "${OUTDIR}"/
  echo "Finished cleaning"
}

trap on_finish EXIT

VERBOSE="error"

# override defaults in a ~/.dverc file
if [ -f ~/.dverc ]; then
  source ~/.dverc
fi


function usage() {
    cat << EOF
usage: $0 [options] filename

This script breaks a video file up into chunks and encodes them in parallel via SSH on
multiple hosts.

OPTIONS:
    -h  this help message.
    -n  Don't delete the source file when finished.
    -l  comma separated list of hosts to use to encode. (default=${SERVERS})
    -t  rough length of individual video chunks, in seconds. (default=${LEN})
    -o  encoding options. (default=${OPTS})
    -s  output file suffix. (default=${DEFAULT_SUFFIX})
    -q  video encoding quality, shortcut to use default encoding options with
        a different CRF. (default=${CRF})
    -f  format (default=matroska)
    -v  verbose job output. (default=false)
EOF
}

# check all required helper utils
function checkpaths() {
    for cmd in parallel ffmpeg; do
        if ! CMD=$(which "${cmd}"); then
            echo "${cmd} not found in local path."
            exit 1
        fi
    done
}

while getopts “hl:t:o:s:q:vf:n” OPTION; do
    case $OPTION in
    h)
    usage
    exit 1
    ;;
    n)
    NOREPLACE=1
    ;;
    l)
    SERVERS="$OPTARG"
    ;;
    t)
    LEN="$OPTARG"
    ;;
    q)
    CRF="$OPTARG"
    OPTS="-map 0 -c:v libx265 -pix_fmt yuv420p10le -preset fast -x265-params crf=${CRF}:aq-mode=3 -c:a libvorbis -aq 5"
    ;;
    o)
    OPTS="$OPTARG"
    ;;
    s)
    SUFFIX="$OPTARG"
    ;;
    f)
    FORMAT="$OPTARG"
    ;;
    v)
    VERBOSE="info"
    ;;
    ?)
    usage
    exit
    ;;
    esac
done
shift $((OPTIND-1))

if [ x"$SUFFIX" = x"" ] ; then
  if [ x"$FORMAT" = x"matroska" ] ; then
    SUFFIX="_x265.mkv"
  elif [ x"$FORMAT" = x"mp4" ] ; then
    SUFFIX="_x265.mp4"
  else
    SUFFIX="_x265.${FORMAT}"
  fi
fi

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

if [[ "${SERVERS}" != */* ]] ; then
  SERVERS="$(echo "$SERVERS" | sed -e 's%,%,1/%g' -e 's%^%1/%')"
fi


checkpaths

if ! mkdir -p ${OUTDIR}; then
    echo "Couldn't create temp chunk output dir ${OUTDIR}."
    exit 1
fi
INFILE=$(realpath "$1")

echo "Processing: ${INFILE}"

function duration() {
  "${PROBE}" \
    -hide_banner \
    -v error \
    -select_streams V \
    -show_entries format=duration \
    -of default=noprint_wrappers=1:nokey=1 \
    "$1"
}

#function streams() {
#  "${PROBE}" \
#    -hide_banner \
#    -v error \
#    -show_entries stream=index \
#    -of default=noprint_wrappers=1:nokey=1 \
#    "$1"
#}

function streams() {
  "${PROBE}" \
    -v quiet \
    -hide_banner \
    -show_streams \
    "$1" | grep index= | sed -e 's/index=//'
}

function video_errors() {
  "${ENC}" \
    -i "$1" \
    -nostats \
    -f null \
    -hide_banner \
    /dev/null \
    2>&1 \
    | grep --color=never '^\[hevc @' \
    | head -1 \
    | wc -l
}

# cap V vs little v in select_streams.
PROBE_REAL_VIDEO=$("${PROBE}" -hide_banner -v error -select_streams V -show_entries stream=index -of default=noprint_wrappers=1:nokey=1 "$1")
PROBE_ALL_VIDEO=$("${PROBE}" -hide_banner -v error -select_streams v -show_entries stream=index -of default=noprint_wrappers=1:nokey=1 "$1")

INPUT_DURATION=$(duration "$1")
INPUT_STREAMS=$(streams "$1")

for i in $PROBE_ALL_VIDEO ; do
  VAL="$i"
  for j in $PROBE_REAL_VIDEO ; do
    if [ x"$i" = x"$j" ] ; then
      VAL=""
    fi
  done
  if [ x"$VAL" = x"$i" ] ; then
    DATA_OPTS="${DATA_OPTS} -map 0:${VAL}"
  fi
done
DATA_OPTS="${DATA_OPTS} -c copy"

echo "Copying file metadata"
DATA_IN="-i ${OUTDIR}/data.enc"
"${ENC}" -y -v error -err_detect ignore_err -i "$1" ${DATA_OPTS} -f "${FORMAT}" "${OUTDIR}/data.enc" ||
  DATA_IN=""

ls -l "${OUTDIR}/data.enc"
if [ ! -s "${OUTDIR}/data.enc" ] ; then
  echo "data.enc is empty"
  echo "${INFILE}"
  exit 1
fi

NUM_IN_STREAMS="$(echo "${INPUT_STREAMS}" | wc -l)"
NUM_META_STREAMS="$(streams "${OUTDIR}/data.enc" | wc -l)"

if [ x"$NUM_IN_STREAMS" != x"$(($NUM_META_STREAMS + 1))" ] ; then
  echo "input streams:    $NUM_IN_STREAMS" 
  echo "metadata streams: $(($NUM_META_STREAMS + 1))"
  exit 2
fi

echo "Creating chunks to encode"
if [[ "$1" == *".AVI" || "$1" == *".avi" ]]; then
  "${ENC}" -hide_banner -fflags +genpts -i "$1" -map 0:V -codec copy -f segment -segment_time $LEN -segment_format "${FORMAT}" -v error "${OUTDIR}/chunk-%03d.orig"
else
  "${ENC}" -hide_banner -i "$1" -map 0:V -codec copy -f segment -segment_time $LEN -segment_format "${FORMAT}" -v error "${OUTDIR}/chunk-%03d.orig"
fi

cd "$OUTDIR"

echo "Running parallel encoding jobs"
PAR_OPTS="--no-notice --gnu -j 100% -S ${SERVERS} --eta --retries 2 --nice 10"
PAR_OPTS="${PAR_OPTS} --workdir ... --transfer --return {.}.enc"
ENC_OPTS=" -hide_banner -y -v error -i {} ${OPTS} -f ${FORMAT} {.}.enc"

parallel ${PAR_OPTS} ${ENC} ${ENC_OPTS} ::: chunk-*.orig

echo "Combining chunks into final video file"
echo "ffconcat version 1.0" > concat.txt
for f in $(ls chunk-*.enc | sort); do
    echo "file ${f}" >> concat.txt
done
BASE=$(basename "${INFILE}")
BASEDIR=$(dirname "${INFILE}")
OUTFILE="${BASEDIR}/${BASE%.*}${SUFFIX}"

${ENC} -y -v error -f concat -i concat.txt ${DATA_IN} -f "${FORMAT}" -c copy "${OUTFILE}"

OUTPUT_DURATION=$(duration "${OUTFILE}")
OUTPUT_STREAMS=$(streams "${OUTFILE}")

if [ x"${NOREPLACE}" = x"0" ] ; then
  if [ x"${INPUT_STREAMS}" = x"${OUTPUT_STREAMS}" ] ; then
    echo "Streams are consistent."
    if [ x"$(bc  <<< "(${INPUT_DURATION} - ${OUTPUT_DURATION})^2 < 2")" = x"1" ] ; then
      echo "Output durations are consistent."
      if [ x"$(video_errors "${OUTFILE}")" = x"1" ] ; then
        echo "Found hevc errors."
        rm "${OUTFILE}"
      else
        echo "No errors found."
        rm "${INFILE}"
      fi
    else
      echo "Input/Output durations are inconsistent."
      echo "INPUT:  ${INPUT_DURATION}"
      echo "OUTPUT: ${OUTPUT_DURATION}"
      rm "${OUTFILE}"
    fi
  else
    echo "Streams are inconsistent."
    echo "INPUT:  ${INPUT_STREAMS}"
    echo "OUTPUT: ${OUTPUT_STREAMS}"
    rm "${OUTFILE}"
  fi
fi
